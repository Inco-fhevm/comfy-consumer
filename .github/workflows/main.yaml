name: Build Next.js Docker Image

on:
  push:
    branches:
      - main

env:
  REGISTRY: gcr.io
  PROJECT_ID: inco-core
  IMAGE_NAME: comfy-consumer

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # for creating tags
      id-token: write  # for GCP OIDC auth
      packages: read   # for reading GitHub packages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Generate version string for Docker image (without creating Git tags)
      - name: Generate version string
        id: version
        run: |
          # Get latest tag if exists, otherwise use v0.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get current commit short hash
          commit_sha=$(git rev-parse --short HEAD)
          
          # Create version string with commit hash
          version_string="${latest_tag}-${commit_sha}"
          
          echo "Version string: $version_string"
          echo "version_string=$version_string" >> $GITHUB_OUTPUT

      # Setup Bun for CI  
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Create local .npmrc with GitHub token
      - name: Create local .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@inco-fhevm:registry=https://npm.pkg.github.com/" >> .npmrc

      # Install dependencies
      - name: Install dependencies
        run: |
          # Install critters for CSS optimization
          bun add critters
          # Install all dependencies
          bun install

      # Run tests (optional)
      - name: Run tests
        run: bun test || echo "No tests found"

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Next.js build output
      - name: Cache Next.js build output
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.svg') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      # Build application with standalone output
      - name: Build application
        run: bun run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      # Authenticate to GCP
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: 'projects/79476508147/locations/global/workloadIdentityPools/github-pool-core/providers/github-provider'
          token_format: 'access_token'

      # Set up gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # Debug IAM permissions
      - name: Debug IAM permissions
        run: |
          echo "Current identity:"
          gcloud config list account --format "value(core.account)"
          
          echo "Available repositories:"
          gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} || echo "Cannot list repositories"
          
          echo "Testing GCS permissions:"
          gsutil ls gs://artifacts.${{ env.PROJECT_ID }}.appspot.com/ || echo "Cannot list GCS bucket"

      # Create GCR storage bucket if it doesn't exist
      - name: Create GCR storage bucket if needed
        run: |
          if ! gsutil ls gs://artifacts.${{ env.PROJECT_ID }}.appspot.com/ &> /dev/null; then
            echo "Creating GCR storage bucket..."
            gsutil mb -p ${{ env.PROJECT_ID }} -l us gs://artifacts.${{ env.PROJECT_ID }}.appspot.com/
          else
            echo "GCR storage bucket already exists"
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure Docker for GCR
      - name: Configure Docker
        run: |
          gcloud auth configure-docker gcr.io --quiet
          cat ~/.docker/config.json || echo "Docker config not found"

      # Use Docker directly for build and push
      - name: Build and push Docker image
        run: |
          # Create docker directory structure
          mkdir -p /tmp/docker/${{ env.IMAGE_NAME }}
          
          # Build image
          docker build \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            --build-arg ID_TOKEN="$(gcloud auth print-identity-token)" \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_string }} \
            .
          
          # Push image
          echo "Pushing Docker image..."
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_string }}
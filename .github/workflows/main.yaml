name: Build Next.js Docker Image

on:
  push:
    branches:
      - main

env:
  REGISTRY: gcr.io
  PROJECT_ID: inco-core
  IMAGE_NAME: comfy-consumer

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # for creating tags
      id-token: write  # for GCP OIDC auth
      packages: read   # for reading GitHub packages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Generate version string for Docker image (without creating Git tags)
      - name: Generate version string
        id: version
        run: |
          # Get latest tag if exists, otherwise use v0.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get current commit short hash
          commit_sha=$(git rev-parse --short HEAD)
          
          # Create version string with commit hash
          version_string="${latest_tag}-${commit_sha}"
          
          echo "Version string: $version_string"
          echo "version_string=$version_string" >> $GITHUB_OUTPUT

      # Setup Bun for CI  
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Create local .npmrc with GitHub token
      - name: Create local .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@inco-fhevm:registry=https://npm.pkg.github.com/" >> .npmrc

      # Install dependencies
      - name: Install dependencies
        run: bun install

      # Run tests (optional)
      - name: Run tests
        run: bun test || echo "No tests found"

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Next.js build output
      - name: Cache Next.js build output
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.svg') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      # Build application with standalone output
      - name: Build application
        run: bun run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          # No need for NEXT_OUTPUT_STANDALONE as it's configured in next.config.js

      # Authenticate to GCP
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: 'projects/79476508147/locations/global/workloadIdentityPools/github-pool-core/providers/github-provider'

      # Set up gcloud CLI
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure Docker for GCR
      - name: Configure Docker
        run: |
          gcloud auth configure-docker gcr.io

      # Build and push using Docker
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_string }}